package fr.adneom.question1;

import junit.framework.Test;
import junit.framework.TestCase;
import junit.framework.TestSuite;

import static org.junit.Assert.assertTrue;

import java.util.Arrays;
import java.util.List;
import java.util.Map;

import org.junit.AfterClass;
import org.junit.Assert;
import org.junit.BeforeClass;
import org.junit.runner.JUnitCore;
import org.junit.runner.Result;
import org.junit.runner.RunWith;
import org.junit.runner.notification.Failure;
import org.junit.runners.Parameterized;
import org.junit.runners.Parameterized.Parameters;
import fr.adneom.question1.*;


public class Question1Test 
{
	private static List<Integer> list;
	private static int[] tailleTab;
	private static Map<Integer,List<List<Integer>>> res;
	
	@BeforeClass
	public static void init() {
		list = Arrays.asList(1, 2, 3, 4, 5);
		tailleTab = new int[]{2,3,1};
		
		for (int taille : tailleTab) {
			res.add(Question1.creerPartition(list,taille));
		}
		
		
		
		String userDir = System.getProperty("user.dir");
		separator = System.getProperty("file.separator");
		lineseparator = System.getProperty("line.separator");
		String os = System.getProperty("os.name");
		
		repExport = userDir + separator + "src" + separator + "test" + separator + "expl" + separator + "export";
		repMft = userDir + separator + "src" + separator + "test" + separator + "mft";

		//Pour Windows, renseigner le chemin vers le script "ex√©cutable"
		if(os != null && os.toLowerCase().contains(OS_WINDOWS.toLowerCase()))
			procEnvoiMft = "C:\\Produits\\Scripts\\procMft\\sportMftWatcherSendFile.bat";
		else
			procEnvoiMft = userDir + separator + "src" + separator + "test" + separator + "expl" + separator + 
			"proc" + separator + "sportMftWatcherSendFile.sh";
			
		bddPropertiesFile = "bdd.properties";
		mftPropertiesFile = "mft_GMAO.properties";
		repExportFile = new File(repExport);
		repMftFlowsFile = new File(repMft + separator + "flows");
		
		for(File fichier : repExportFile.listFiles())
			fichier.delete();
		
		for(File fichier : repMftFlowsFile.listFiles())
			fichier.delete();
		
		arguments = new String[] {repExport,
		             repMft,
		             procEnvoiMft,
		             bddPropertiesFile,
		             mftPropertiesFile};
		
		mainTestTermine = false;
		
		jarFile = userDir + separator + "target" + separator + "sportExportGmao.jar";
		File targeteBatch = new File(userDir + separator + ".." + separator + "target");
		String archiveBatch = null;
		for(File fichier : targeteBatch.listFiles())
			if(fichier.getName().toLowerCase().startsWith("sportmga")) {
				archiveBatch = fichier.getName();
				break;
			}
		libJarFiles = userDir + separator + ".." + separator + "target" + separator + archiveBatch 
						+ separator + "appli" + separator + "lib" + separator + "*";
		resourcesJar = userDir + separator + "src" + separator + "test" + separator + "resources";
	}
	
    public void testApp()
    {
        assertTrue( list != null );
    }
}


